// Automatically generated. DO NOT EDIT!
#ifndef __X86_BASE_H__
#define __X86_BASE_H__

#include <string>

typedef unsigned char byte;
typedef unsigned short word;

class X86Base {
 public:
  X86Base();
  virtual ~X86Base();

  virtual void reset();
  virtual void step();

  virtual void clearExecutionState();
  virtual void fetchAndDecode();
  virtual void execute();

  // Mandatory implementations.
  virtual byte fetch() = 0;
  virtual void notImplemented(const char* opcode_name) = 0;
  virtual void invalidOpcode() = 0;

  virtual word* getReg16Ptr(int reg) = 0;
  virtual byte* getReg8Ptr(int reg) = 0;
  virtual word* getMem16Ptr(word segment, word offset) = 0;

  virtual bool getFlag(word mask) const = 0;
  virtual void setFlag(word mask, bool value) = 0;

  std::string getOpcodeDesc() const;

 public:
  enum {
    R16_AX,
    R16_BX,
    R16_CX,
    R16_DX,
    R16_CS,
    R16_DS,
    R16_SS,
    R16_ES,
    R16_BP,
    R16_SP,
    R16_DI,
    R16_SI,

    R16_IP,

    R16_COUNT
  };

  enum {
    R8_AL,
    R8_AH,
    R8_BL,
    R8_BH,
    R8_CL,
    R8_CH,
    R8_DL,
    R8_DH,
    R8_COUNT
  };

  enum {
    F_CF = (1 <<  0),
    F_PF = (1 <<  2),
    F_AF = (1 <<  4),
    F_ZF = (1 <<  6),
    F_SF = (1 <<  7),
    F_TF = (1 <<  8),
    F_IF = (1 <<  9),
    F_DF = (1 << 10),
    F_OF = (1 << 11),
  };

 protected:
  // Opcode being executed.
  byte opcode_;
  const char* opcode_desc_;

  // Pointer to opcode implementation.
  void (X86Base::*handler_)();

  // Prefix opcode, if any.
  byte rep_opcode_;
  const char* rep_opcode_desc_;

  // Segment (default or overriden).
  word segment_;
  const char* segment_desc_;

  // ModRM byte.
  byte modrm_;
  bool fetched_modrm_;

  // Placeholders for immediate or constant.
  word immediate_w_;
  byte immediate_b_;

  // Byte and Word source and destination pointers.
  byte* barg1;
  word* warg1;
  const char* arg1_desc_;

  byte* barg2;
  word* warg2;
  const char* arg2_desc_;

  // Temp storage for non-const argument descriptions.
  std::string temp_arg_desc_1_;
  std::string temp_arg_desc_2_;

  // Address of the instruction being executed.
  word current_cs_, current_ip_;

 public:
  word fetch16();
  word signExtend(byte val);

 private:
  // Helpers.
  byte decodeGRP();

  word* decodeReg_w();
  word* decodeRM_w();

  byte* decodeReg_b();
  byte* decodeRM_b();

  word* decodeI_w();
  byte* decodeI_b();

  word* decodeS();

  word* decodeRRR_w(int rrr);
  byte* decodeRRR_b(int rrr);

  word* decodeJ_w();
  word* decodeJ_b();

  word* decodeO_w();

  word* addConstArg_w(word arg);
  byte* addConstArg_b(byte arg);

  byte modRM();

  word getReg16(int reg);
  byte getReg8(int reg);

  void addConstArgDesc(const char* desc);
  void addArgDesc(const std::string& desc);

 protected:
  // GENERATED CODE
};

#endif  // __X86_BASE_H__