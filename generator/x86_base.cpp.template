// Automatically generated. DO NOT EDIT!
#include "x86_base.h"
#include "helpers.h"

#include <cassert>
#include <iostream>
#include <sstream>

using namespace std;


X86Base::X86Base() {
}

X86Base::~X86Base() {
}


void X86Base::addConstArgDesc(const char* desc) {
  if (arg1_desc_ == nullptr) {
    arg1_desc_ = desc;
  } else if (arg2_desc_ == nullptr) {
    arg2_desc_ = desc;
  } else {
    cerr << "Partial opcode: " << getOpcodeDesc() << endl;
    cerr << "Arg: " << desc << endl;
    assert(false);
  }
}


void X86Base::addArgDesc(const string& desc) {
  if (arg1_desc_ == nullptr) {
    temp_arg_desc_1_ = desc;
    addConstArgDesc(temp_arg_desc_1_.data());
  } else if (arg2_desc_ == nullptr) {
    temp_arg_desc_2_ = desc;
    addConstArgDesc(temp_arg_desc_2_.data());
  } else {
    assert(false);
  }
}


word X86Base::fetch16() {
  byte lo = fetch();
  byte hi = fetch();
  return lo | (hi << 8);
}


byte X86Base::modRM() {
  if (!fetched_modrm_) {
    modrm_ = fetch();
    fetched_modrm_ = true;
  }
  return modrm_;
}


word X86Base::getReg16(int reg) {
  return *getReg16Ptr(reg);
}


byte X86Base::getReg8(int reg) {
  return *getReg8Ptr(reg);
}


word* X86Base::decodeRRR_w(int rrr) {
  static const int MODRM_REG_16[8] = { R16_AX, R16_CX, R16_DX, R16_BX,
                                       R16_SP, R16_BP, R16_SI, R16_DI };
  assert(rrr < 8);
  int reg = MODRM_REG_16[rrr];

  addConstArgDesc(REG16_DESC[reg]);
  return getReg16Ptr(reg);
}


byte* X86Base::decodeRRR_b(int rrr) {
  static const int MODRM_REG_8[8] = { R8_AL, R8_CL, R8_DL, R8_BL,
                                      R8_AH, R8_CH, R8_DH, R8_BH };
  assert(rrr < 8);
  int reg = MODRM_REG_8[rrr];

  addConstArgDesc(REG8_DESC[reg]);
  return getReg8Ptr(reg);
}


word* X86Base::addConstArg_w(word arg) {
  immediate_w_ = arg;
  addArgDesc(hex16ToString(immediate_w_) + "h");
  return &immediate_w_;
}


byte* X86Base::addConstArg_b(byte arg) {
  immediate_b_ = arg;
  addArgDesc(hex8ToString(immediate_b_) + "h");
  return &immediate_b_;
}


word* X86Base::decodeI_w() {
  return addConstArg_w(fetch16());
}

byte* X86Base::decodeI_b() {
  return addConstArg_b(fetch());
}


word* X86Base::decodeJ_w() {
  immediate_w_ = fetch16();
  immediate_w_ += getReg16(R16_IP);
  addArgDesc(hex16ToString(immediate_w_) + "h");
  return &immediate_w_;
}


word* X86Base::decodeJ_b() {
  immediate_w_ = fetch();
  immediate_w_ += getReg16(R16_IP);
  addArgDesc(hex16ToString(immediate_w_) + "h");
  return &immediate_w_;
}


word* X86Base::decodeReg_w() {
  int reg = (modRM() & 0b00111000) >> 3;
  return decodeRRR_w(reg);
}


byte X86Base::decodeGRP() {
  return (modRM() & 0b00111000) >> 3;
}


word* X86Base::decodeS() {
  static const int MODRM_SEG[4] = { R16_ES, R16_CS, R16_SS, R16_DS };
  int sss = (modRM() & 0b00111000) >> 3;
  assert(sss < 4);
  int seg = MODRM_SEG[sss];

  addConstArgDesc(REG16_DESC[seg]);
  return getReg16Ptr(seg);
}


byte* X86Base::decodeRM_b() {
  int mod = (modRM() & 0b11000000) >> 6;
  int rm =  (modRM() & 0b00000111);

  if (mod == 0b11) {
    // rm is a general register.
    return decodeRRR_b(rm);
  }

  return (byte*)decodeRM_w();
}


word* X86Base::decodeRM_w() {
  int mod = (modRM() & 0b11000000) >> 6;
  int rm =  (modRM() & 0b00000111);

  if (mod == 0b11) {
    // rm is a general register.
    return decodeRRR_w(rm);
  }

  word displacement = 0;
  if (mod == 0b00) {
    if (rm == 0b110) {
      displacement = fetch16();
    } else {
      displacement = 0;
    }
  } else if (mod == 0b01) {
    displacement = signExtend(fetch());
  } else if (mod == 0b10) {
    displacement = fetch16();
  }

  string desc;
  word base = 0;
  if (rm == 0b000) {
    desc = "BX + SI";
    base = getReg16(R16_BX) + getReg16(R16_SI);
  } else if (rm == 0b001) {
    desc = "BX + DI";
    base = getReg16(R16_BX) + getReg16(R16_DI);
  } else if (rm == 0b010) {
    desc = "BP + SI";
    base = getReg16(R16_BP) + getReg16(R16_SI);
  } else if (rm == 0b011) {
    desc = "BP + DI";
    base = getReg16(R16_BP) + getReg16(R16_DI);
  } else if (rm == 0b100) {
    desc = "SI";
    base = getReg16(R16_SI);
  } else if (rm == 0b101) {
    desc = "DI";
    base = getReg16(R16_DI);
  } else if (rm == 0b110) {
    if (mod != 0b00) {
      desc = "BP";
      base = getReg16(R16_BP);
    }
  } else if (rm == 0b111) {
    desc = "BX";
    base = getReg16(R16_BX);
  }

  if (mod == 0b00 && rm == 0b110) {
    desc += hex16ToString(displacement) + "h";
  } else {
    if (desc != "" && displacement != 0) {
      desc += " + ";
    }
    if (displacement != 0) {
      desc += hex16ToString(displacement) + "h";
    }
  }

  addArgDesc(string("[") + segment_desc_ + desc + "]");
  return getMem16Ptr(segment_, displacement);
}


byte* X86Base::decodeReg_b() {
  int reg = (modRM() & 0b00111000) >> 3;
  return decodeRRR_b(reg);
}


word X86Base::signExtend(byte val) {
  // TODO
  return val;
}

void X86Base::reset() {
}


string X86Base::getOpcodeDesc() const {
  string desc;

  desc += rep_opcode_desc_;
  desc += opcode_desc_;
  desc += " ";
  if (arg1_desc_) {
    desc += arg1_desc_;
    if (arg2_desc_) {
      desc += ", ";
      desc += arg2_desc_;
    }
  }

  return desc;
}


void X86Base::step() {
  // Clear the execution state.
  fetched_modrm_ = false;
  barg1 = barg2 = nullptr;
  warg1 = warg2 = nullptr;
  arg1_desc_ = nullptr;
  arg2_desc_ = nullptr;

  segment_ = getReg16(R16_DS);
  segment_desc_ = "";

  opcode_ = 0;
  opcode_desc_ = "";

  rep_opcode_ = 0;
  rep_opcode_desc_ = "";

  current_cs_ = getReg16(R16_CS);
  current_ip_ = getReg16(R16_IP);

  void (X86Base::*handler)() = nullptr;

  // Fetch the opcode and decode its arguments. Also process segment override
  // and take note of REP opcodes.
  bool have_opcode = true;
  do {
    // Fetch the next opcode. Assume it's a primitive opcode.
    opcode_ = fetch();
    have_opcode = true;

    // GENERATED CODE

  } while (!have_opcode);

  if (handler == nullptr) {
    invalidOpcode();
  }

  // Execute the opcode handler, repeatedly if there's a REP prefix active.
  do {
    // Handle start of REP loop.
    if (rep_opcode_ != 0 && getReg16(R16_CX) == 0) {
      break;
    }

    // Call the custom implementation.
    (this->*handler)();

    // Handle end of REP loop.
    if (rep_opcode_ != 0) {
      *getReg16Ptr(R16_CX) = getReg16(R16_CX) - 1;
      if (opcode_ == 0xA6 || // CMPB
          opcode_ == 0xA7 || // CMPW
          opcode_ == 0xAE || // SCASB
          opcode_ == 0xAF) { // SCASW

        if ((rep_opcode_ == 0xF3 &&  getFlag(F_ZF)) || // REPZ
            (rep_opcode_ == 0xF2 && !getFlag(F_ZF))) { // REPNZ
          break;
        }

      }
    }
  } while (rep_opcode_ != 0);

}